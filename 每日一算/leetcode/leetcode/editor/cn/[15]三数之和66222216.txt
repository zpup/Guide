class Solution {

    public static List<List<Integer>> threeSum(int[] nums) {
        //优先排序 这里使用快排吧
        quickSort(nums, 0, nums.length - 1);
        //然后依次循环 通过双指针 组成新的数组
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        for (int i = 0; i < nums.length; i++) {
            int left = i + 1;
            int right = nums.length - 1;
            int key = nums[i];
            List<Integer> child = new ArrayList<Integer>();
            while (left < right) {
                if (key + nums[left] + nums[right] == 0) {
                    child.add(key);
                    child.add(nums[left]);
                    child.add(nums[right]);
                    res.add(child);
                    child = new ArrayList<Integer>();
                    left++;
                    continue;
                }
                if (nums[left] > (key + nums[right])) {
                    left++;
                }
                if (nums[left] < (key + nums[right])) {
                    right--;
                }
            }
        }
        return res;
    }

    public static void quickSort(int[] nums, int start, int end) {
        if (start >= end) {
            return;
        }

        int left = nums[start];
        int i = start;
        int j = end;

        while (i < j) {
            //j向左移，直到遇到比key小的值
            while (nums[j] >= left && i < j) {
                j--;
            }
            //i向右移，直到遇到比key大的值
            while (nums[i] <= left && i < j) {
                i++;
            }
            //i和j指向的元素交换
            if (i < j) {
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
            }
        }
        nums[start] = nums[i];
        nums[i] = left;
        System.out.println("left" + nums.toString());
        System.out.println(Arrays.toString(nums));
        quickSort(nums, start, i - 1);
        System.out.println("right" + nums.toString());
        System.out.println(Arrays.toString(nums));
        quickSort(nums, i + 1, end);
    }
}

//total_testcases:313
//total_correct:14
//input_formatted:[-1,0,1,2,-1,-4]
//expected_output:[[-1,-1,2],[-1,0,1]]
//code_output:[[-1,-1,2],[-1,0,1],[-1,0,1]]
